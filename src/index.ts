/** ELECTRON **/

import { app, BrowserWindow, ipcMain, dialog } from "electron";
import appExpress, { startServer } from "./express";
import jsonfile from "jsonfile";

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

let mainWindow: BrowserWindow;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  // eslint-disable-line global-require
  app.quit();
}
const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 1040,
    width: 1260,
    autoHideMenuBar: true,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      contextIsolation: true,
      nodeIntegration: true,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", () => {
  startServer(appExpress);
  createWindow
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

ipcMain.on("openFSDialogue", retrieveOutputPath);

async function retrieveOutputPath() {
  const response = await dialog.showOpenDialog({
    properties: ["openDirectory"],
  });

  const configJsonPath = "./src/api/config.json";

  const jsonData = await jsonfile.readFile(configJsonPath);

  jsonData.outputPath = response.filePaths[0];

  jsonfile.writeFile(configJsonPath, jsonData, function (err) {
    if (err) console.error(err);
  });
}

export default function getWindow() {
  return mainWindow; // Return the instance of the window
}
